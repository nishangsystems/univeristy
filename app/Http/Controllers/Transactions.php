<?php

namespace App\Http\Controllers;

use App\Models\Transaction;
use Bmatovu\MtnMomo\Exceptions\CollectionRequestException;
use Bmatovu\MtnMomo\Products\Collection;
use Illuminate\Http\Request;
use Ramsey\Uuid\Uuid;

class Transactions extends Controller
{
    //

    public function paymentForm()
    {
        return view('transaction.transaction_form'); // TODO: Change the autogenerated stub
    }
    public function makePayments(Request $request){

//      $request->validate([
//            'password' => 'required'
//        ]);
        if( $request->tel == '' ){
            Throw new \Error("Phone number is required",400);
        }
        if( strlen($request->tel )  != 9 ){
            Throw new \Error("Phone number must be 9 digits",400);

        }
        if( !$request->amount ){
            Throw new \Error("Amount is required",400);
        }

        if ( !$request->redirect_route ){
            Throw new \Error("Redirect route is required",400);
        }

        if ( !$request->student_id ){
            Throw new \Error("Student Id is required",400);
        }
        if ( !$request->year_id ){
            Throw new \Error("Year Id is required",400);
        }
        try {


            $collection = new Collection();

            $collection->getToken();
            $momoTransactionId = $collection->requestToPay(Uuid::uuid4()->toString(), '237' . $request->tel, $request->amount);

            $transaction_status = $collection->getTransactionStatus($momoTransactionId);
            dd($transaction_status, $momoTransactionId);
            //save transaction
            $transaction = new Transaction();
            $transaction->payment_method = 'Mtn Mobile Money';
            $transaction->payment_purpose = $request->payment_purpose;
            $transaction->status = 'pending'; //pending,failed,completed
            $transaction->year_id = $request->year_id;
            $transaction->amount = intval($request->amount);
            $transaction->reference = $request->reference;
            $transaction->transaction_id = $momoTransactionId;
            $transaction->save();
        }catch(CollectionRequestException $e) {
            do {
                printf("\n\r%s:%d %s (%d) [%s]\n\r",
                    $e->getFile(), $e->getLine(), $e->getMessage(), $e->getCode(), get_class($e));
            } while($e = $e->getPrevious());
        }

//        return redirect()->route($request->redirect_route)->with('transaction_response',['transaction_id'=>$momoTransactionId , 'success'=>true,'transaction_status'=>'payment initiated']);
//       return response()->json( ['transaction_id'=>$momoTransactionId , 'success'=>true,'transaction_status'=>'payment initiated'] );


    }
//    public function getTransactionStatus($transaction_id){
//        $collection = new Collection();
//        $status = $collection->getTransactionStatus($transaction_id);
////        $transaction = Transaction::where('transaction_id',$transaction_id)->find();
////        if ($transaction){
////            if ()
////            $transaction->sta
////        }
////        return[
////
////        ];
//
//
//    }
}

